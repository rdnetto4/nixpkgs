diff --git a/bitbucket-pipelines.yml b/bitbucket-pipelines.yml
new file mode 100644
index 0000000000..e78e72eb4a
--- /dev/null
+++ b/bitbucket-pipelines.yml
@@ -0,0 +1,9 @@
+image: s50600822/bazel:18
+
+pipelines:
+  default:
+    - step:
+        size: 2x # We exhaust our memory otherwise
+        script:
+          - bazel version
+          - bazel build //src:bazel --verbose_failures=true --sandbox_debug
diff --git a/src/main/java/com/google/devtools/build/lib/bazel/rules/java/BazelJavaRuleClasses.java b/src/main/java/com/google/devtools/build/lib/bazel/rules/java/BazelJavaRuleClasses.java
index 0f5c597c2a..fb0d20a432 100644
--- a/src/main/java/com/google/devtools/build/lib/bazel/rules/java/BazelJavaRuleClasses.java
+++ b/src/main/java/com/google/devtools/build/lib/bazel/rules/java/BazelJavaRuleClasses.java
@@ -148,6 +148,15 @@ public class BazelJavaRuleClasses {
                   .mandatoryProvidersList(
                       ImmutableList.of(CONTAINS_CC_LINK_PARAMS, CONTAINS_JAVA_PROVIDER))
                   .skipAnalysisTimeFileTypeCheck())
+          /* <!-- #BLAZE_RULE(java_rule).ATTRIBUTE(provided_deps) -->
+          Libraries to make available at compile-time only.
+          <!-- #END_BLAZE_RULE.ATTRIBUTE --> */
+          .add(
+              attr("provided_deps", LABEL_LIST)
+                  .allowedFileTypes(JavaSemantics.JAR)
+                  .allowedRuleClasses(ALLOWED_RULES_IN_DEPS)
+                  .mandatoryProvidersList(MANDATORY_JAVA_PROVIDER_ONLY)
+                  .skipAnalysisTimeFileTypeCheck())
           /* <!-- #BLAZE_RULE($java_rule).ATTRIBUTE(runtime_deps) -->
           Libraries to make available to the final binary or test at runtime only.
           Like ordinary <code>deps</code>, these will appear on the runtime classpath, but unlike
diff --git a/src/main/java/com/google/devtools/build/lib/rules/java/JavaCommon.java b/src/main/java/com/google/devtools/build/lib/rules/java/JavaCommon.java
index 549b70bc6f..cb1559c487 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/java/JavaCommon.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/java/JavaCommon.java
@@ -66,7 +66,7 @@ public class JavaCommon {
   public static final InstrumentationSpec JAVA_COLLECTION_SPEC = new InstrumentationSpec(
       FileTypeSet.of(JavaSemantics.JAVA_SOURCE))
       .withSourceAttributes("srcs")
-      .withDependencyAttributes("deps", "data", "exports", "runtime_deps");
+      .withDependencyAttributes("deps", "data", "exports", "provided_deps", "runtime_deps");
 
   /** Collects all metadata files generated by Java compilation actions. */
   private static final LocalMetadataCollector JAVA_METADATA_COLLECTOR =
@@ -562,6 +562,17 @@ public class JavaCommon {
     return jvmFlags;
   }
 
+  private static List<TransitiveInfoCollection> getProvidedDeps(RuleContext ruleContext) {
+    // We need to check here because there are classes inheriting from this class that implement
+    // rules that don't have this attribute.
+    if (ruleContext.attributes().has("provided_deps", BuildType.LABEL_LIST)) {
+      return ImmutableList.copyOf(
+              ruleContext.getPrerequisites("provided_deps", Mode.TARGET));
+    } else {
+      return ImmutableList.of();
+    }
+  }
+
   private static List<TransitiveInfoCollection> getRuntimeDeps(RuleContext ruleContext) {
     // We need to check here because there are classes inheriting from this class that implement
     // rules that don't have this attribute.
@@ -602,6 +613,7 @@ public class JavaCommon {
     processSrcs(javaTargetAttributes);
     javaTargetAttributes.addSourceArtifacts(sources);
     javaTargetAttributes.addSourceArtifacts(extraSrcs);
+    processProvidedDeps(javaTargetAttributes);
     processRuntimeDeps(javaTargetAttributes);
 
     if (disallowDepsWithoutSrcs(ruleContext.getRule().getRuleClass())
@@ -654,6 +666,7 @@ public class JavaCommon {
       builder.addAll(getRuntimeDeps(ruleContext));
       builder.addAll(getExports(ruleContext));
     }
+
     builder.addAll(ruleContext.getPrerequisites("deps", Mode.TARGET));
 
     semantics.collectTargetsTreatedAsDeps(ruleContext, builder, type);
@@ -739,6 +752,18 @@ public class JavaCommon {
     }
   }
 
+  /**
+   * Processes the transitive provided deps of this target.
+   */
+  private void processProvidedDeps(JavaTargetAttributes.Builder attributes) {
+    List<TransitiveInfoCollection> providedDepInfo = getProvidedDeps(ruleContext);
+    JavaCompilationArgsProvider provider =
+            JavaCompilationArgsProvider.legacyFromTargets(
+                    providedDepInfo, semantics.isJavaProtoLibraryStrictDeps(ruleContext));
+    attributes.addCompileTimeClassPathEntries(provider.getTransitiveCompileTimeJars());
+    attributes.addInstrumentationMetadataEntries(provider.getInstrumentationMetadata());
+  }
+
   /**
    * Processes the transitive runtime_deps of this target.
    */
diff --git a/src/main/java/com/google/devtools/build/lib/rules/java/JavaCompilationHelper.java b/src/main/java/com/google/devtools/build/lib/rules/java/JavaCompilationHelper.java
index dc117b3951..b5938389b7 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/java/JavaCompilationHelper.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/java/JavaCompilationHelper.java
@@ -756,12 +756,13 @@ public final class JavaCompilationHelper {
    *
    * @param deps the dependencies to be included as roots of the transitive
    *        closure
+   * @param strictJavaDeps the strictness level used in verifying direct dependency checks.
    */
-  public void addLibrariesToAttributes(Iterable<? extends TransitiveInfoCollection> deps) {
+  public void addLibrariesToAttributes(Iterable<? extends TransitiveInfoCollection> deps, StrictDepsMode strictJavaDeps) {
     // Enforcing strict Java dependencies: when the --strict_java_deps flag is
     // WARN or ERROR, or is DEFAULT and strict_java_deps attribute is unset,
     // we use a stricter javac compiler to perform direct deps checks.
-    attributes.setStrictJavaDeps(getStrictJavaDeps());
+    attributes.setStrictJavaDeps(strictJavaDeps);
     addLibrariesToAttributesInternal(deps);
 
     JavaClasspathMode classpathMode = getJavaConfiguration().getReduceJavaClasspath();
@@ -778,6 +779,10 @@ public final class JavaCompilationHelper {
     }
   }
 
+  public void addLibrariesToAttributes(Iterable<? extends TransitiveInfoCollection> deps) {
+      addLibrariesToAttributes(deps, getStrictJavaDeps());
+  }
+
   /**
    * Determines whether to enable strict_java_deps.
    *
diff --git a/src/main/java/com/google/devtools/build/lib/rules/java/JavaInfo.java b/src/main/java/com/google/devtools/build/lib/rules/java/JavaInfo.java
index 19168fffe7..329b78c135 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/java/JavaInfo.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/java/JavaInfo.java
@@ -418,6 +418,7 @@ public final class JavaInfo extends NativeInfo implements JavaInfoApi<Artifact>
         Object sourceJarApi,
         Boolean neverlink,
         SkylarkList<?> deps,
+        SkylarkList<?> providedDeps,
         SkylarkList<?> runtimeDeps,
         SkylarkList<?> exports,
         Object actionsApi,
@@ -478,6 +479,7 @@ public final class JavaInfo extends NativeInfo implements JavaInfoApi<Artifact>
                 useIjar != null ? useIjar : true,
                 neverlink,
                 (SkylarkList<JavaInfo>) deps,
+                (SkylarkList<JavaInfo>) providedDeps,
                 (SkylarkList<JavaInfo>) runtimeDeps,
                 (SkylarkList<JavaInfo>) exports,
                 actions,
@@ -493,6 +495,7 @@ public final class JavaInfo extends NativeInfo implements JavaInfoApi<Artifact>
           .createJavaInfo(
               outputJar, compileJar, sourceJar, neverlink,
               (SkylarkList<JavaInfo>) deps,
+              (SkylarkList<JavaInfo>) providedDeps,
               (SkylarkList<JavaInfo>) runtimeDeps,
               (SkylarkList<JavaInfo>) exports, jdeps, loc);
     }
diff --git a/src/main/java/com/google/devtools/build/lib/rules/java/JavaInfoBuildHelper.java b/src/main/java/com/google/devtools/build/lib/rules/java/JavaInfoBuildHelper.java
index a73db3f8c5..1b46b830ac 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/java/JavaInfoBuildHelper.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/java/JavaInfoBuildHelper.java
@@ -88,6 +88,7 @@ final class JavaInfoBuildHelper {
       Boolean useIjar,
       Boolean neverlink,
       SkylarkList<JavaInfo> compileTimeDeps,
+      SkylarkList<JavaInfo> providedDeps,
       SkylarkList<JavaInfo> runtimeDeps,
       SkylarkList<JavaInfo> exports,
       Object actions,
@@ -150,6 +151,7 @@ final class JavaInfoBuildHelper {
         sourceJar,
         neverlink,
         compileTimeDeps,
+        providedDeps,
         runtimeDeps,
         exports,
         jdeps,
@@ -166,6 +168,7 @@ final class JavaInfoBuildHelper {
    * @param sourceJar the source jar that was used to create the output jar
    * @param neverlink if true only use this library for compilation and not at runtime
    * @param compileTimeDeps compile time dependencies that were used to create the output jar
+   * @param providedDeps provided dependencies that were used to create the output jar
    * @param runtimeDeps runtime dependencies that are needed for this library
    * @param exports libraries to make available for users of this library. <a
    *     href="https://docs.bazel.build/versions/master/be/java.html#java_library"
@@ -179,6 +182,7 @@ final class JavaInfoBuildHelper {
       @Nullable Artifact sourceJar,
       Boolean neverlink,
       SkylarkList<JavaInfo> compileTimeDeps,
+      SkylarkList<JavaInfo> providedDeps,
       SkylarkList<JavaInfo> runtimeDeps,
       SkylarkList<JavaInfo> exports,
       @Nullable Artifact jdeps,
@@ -212,6 +216,9 @@ final class JavaInfoBuildHelper {
     fetchProviders(compileTimeDeps, JavaCompilationArgsProvider.class)
         .forEach(args -> javaCompilationArgsBuilder.addDeps(args, type));
 
+    fetchProviders(providedDeps, JavaCompilationArgsProvider.class)
+        .forEach(args -> javaCompilationArgsBuilder.addDeps(args, COMPILE_ONLY));
+
     fetchProviders(runtimeDeps, JavaCompilationArgsProvider.class)
         .forEach(args -> javaCompilationArgsBuilder.addDeps(args, RUNTIME_ONLY));
 
diff --git a/src/main/java/com/google/devtools/build/lib/rules/java/JavaLibrary.java b/src/main/java/com/google/devtools/build/lib/rules/java/JavaLibrary.java
index 2d3e7deacd..11f4f77e63 100644
--- a/src/main/java/com/google/devtools/build/lib/rules/java/JavaLibrary.java
+++ b/src/main/java/com/google/devtools/build/lib/rules/java/JavaLibrary.java
@@ -22,6 +22,7 @@ import com.google.devtools.build.lib.analysis.RuleConfiguredTargetBuilder;
 import com.google.devtools.build.lib.analysis.RuleConfiguredTargetFactory;
 import com.google.devtools.build.lib.analysis.RuleContext;
 import com.google.devtools.build.lib.analysis.RunfilesProvider;
+import com.google.devtools.build.lib.analysis.config.BuildConfiguration.StrictDepsMode;
 import com.google.devtools.build.lib.collect.nestedset.NestedSet;
 import com.google.devtools.build.lib.collect.nestedset.NestedSetBuilder;
 import com.google.devtools.build.lib.rules.cpp.LinkerInput;
@@ -57,10 +58,11 @@ public class JavaLibrary implements RuleConfiguredTargetFactory {
       throws InterruptedException, RuleErrorException, ActionConflictException {
     JavaTargetAttributes.Builder attributesBuilder = common.initCommon();
 
+    //
     // Collect the transitive dependencies.
     JavaCompilationHelper helper = new JavaCompilationHelper(
         ruleContext, semantics, common.getJavacOpts(), attributesBuilder);
-    helper.addLibrariesToAttributes(common.targetsTreatedAsDeps(ClasspathType.COMPILE_ONLY));
+    helper.addLibrariesToAttributes(common.targetsTreatedAsDeps(ClasspathType.COMPILE_ONLY), StrictDepsMode.OFF);
 
     if (ruleContext.hasErrors()) {
       return null;
diff --git a/src/main/java/com/google/devtools/build/lib/skylarkbuildapi/java/JavaInfoApi.java b/src/main/java/com/google/devtools/build/lib/skylarkbuildapi/java/JavaInfoApi.java
index 5b5ccc489c..a2e282f622 100644
--- a/src/main/java/com/google/devtools/build/lib/skylarkbuildapi/java/JavaInfoApi.java
+++ b/src/main/java/com/google/devtools/build/lib/skylarkbuildapi/java/JavaInfoApi.java
@@ -201,6 +201,13 @@ public interface JavaInfoApi <FileT extends FileApi> extends StructApi {
             named = true,
             defaultValue = "[]",
             doc = "Compile time dependencies that were used to create the output jar."),
+        @Param(
+            name = "provided_deps",
+            type = SkylarkList.class,
+            generic1 = JavaInfoApi.class,
+            named = true,
+            defaultValue = "[]",
+            doc = "Provided dependencies that were used to create the output jar."),
         @Param(
             name = "runtime_deps",
             type = SkylarkList.class,
@@ -301,6 +308,7 @@ public interface JavaInfoApi <FileT extends FileApi> extends StructApi {
         Object sourceJarApi,
         Boolean neverlink,
         SkylarkList<?> deps,
+        SkylarkList<?> providedDeps,
         SkylarkList<?> runtimeDeps,
         SkylarkList<?> exports,
         Object actionsApi,
diff --git a/src/main/java/com/google/devtools/build/skydoc/fakebuildapi/java/FakeJavaInfo.java b/src/main/java/com/google/devtools/build/skydoc/fakebuildapi/java/FakeJavaInfo.java
index ee09908be9..f10f191283 100644
--- a/src/main/java/com/google/devtools/build/skydoc/fakebuildapi/java/FakeJavaInfo.java
+++ b/src/main/java/com/google/devtools/build/skydoc/fakebuildapi/java/FakeJavaInfo.java
@@ -118,7 +118,7 @@ public class FakeJavaInfo implements JavaInfoApi<FileApi> {
 
     @Override
     public JavaInfoApi<?> javaInfo(FileApi outputJarApi, Object compileJarApi, Object sourceJarApi,
-        Boolean neverlink, SkylarkList<?> deps, SkylarkList<?> runtimeDeps, SkylarkList<?> exports,
+        Boolean neverlink, SkylarkList<?> deps, SkylarkList<?> providedDeps, SkylarkList<?> runtimeDeps, SkylarkList<?> exports,
         Object actionsApi, Object sourcesApi, Object sourceJarsApi, Object useIjarApi,
         Object javaToolchainApi, Object hostJavabaseApi, Object jdepsApi, Location loc,
         Environment env) throws EvalException {
